#!/usr/bin/env julia

using ArgParse
using OhMyJulia

include("Falcon.jl")
using Falcon

const o = let
    s = ArgParseSettings()

    @add_arg_table s begin
        "rules"
            help = "rule files"
            nargs = '+'
        "--bam", "-b"
            help = "input bam, uncompressed (use gzip -cd to decompress). defualt is STDIN"
            default = "-"
        "--sam", "-s"
            help = "output sam file, `-` means STDOUT"
        "--vcf", "-v"
            help = "output vcf file, `-` means STDOUT"
        "--dir", "-d"
            help = "stat output dir, must exist already."
        "--nopair", "-n"
            help = "don't pair reads; read.mate will be unaccessable"
            action = :store_true
        "--explore", "-e"
            help = "explore mode"
            action = :store_true
        "--debug", "--verbos"
            help = "output debug infomation"
            action = :store_true
    end

    parse_args(s) |> to_module
end

const rules = mapreduce(load_rule_file, ++, o.rules)

const bam = Bam(o.bam == "-" ? STDIN : open(o.bam))

reads = collect(bam)

if !o.nopair
    fast_pair!(reads)
end

if o.explore
    error("TODO")
end

reads = filter_reads(filter(x->!x.bymut, rules), reads, statdir = o.dir, debug = o.debug)

if o.sam != nothing
    sam = o.sam == "-" ? STDOUT : open(o.sam, "w")
    write_sam_head(sam, bam)
    for read in reads
        write_sam_line(sam, bam, read)
    end
end

if o.vcf != nothing
    vcf = o.vcf == "-" ? STDOUT : open(o.vcf, "w")
    write_vcf_head(vcf, rules)
    filter_muts(vcf, filter(x->x.bymut, rules), bam, reads, statdir = o.dir, debug = o.debug)
end
