#!/usr/bin/env julia

using ArgParse
using OhMyJulia
using Insane
using StatsBase
using HypothesisTests
import Base: start, next, done, iteratorsize, eltype, getindex, setindex!, show, ==, hash, write

include("mut.jl")
include("read.jl")
include("bam.jl")
include("sam.jl")
include("pair.jl")
include("rule.jl")
include("vcf.jl")
include("pileup.jl")
include("driver.jl")

const o = let
    s = ArgParseSettings()

    @add_arg_table s begin
        "rules"
            help = "rule files"
            nargs = '+'
        "--bam", "-b"
            help = "input bam, uncompressed (use gzip -cd to uncompress). defualt is STDIN"
            default = "-"
        "--sam", "-s"
            help = "output sam file, `-` means STDOUT"
        "--vcf", "-v"
            help = "output vcf file, `-` means STDOUT"
            default = "-"
        "--explore", "-e"
            help = "explore mode"
            action = :store_true
    end

    parse_args(s) |> to_module
end

const rules = reduce(++, map(load_rule_file, o.rules))

if o.explore
    error("TODO")
end

bam = Bam(o.bam == "-" ? STDIN : open(o.bam))

reads = filter_reads(rules, bam)

if o.sam != nothing
    sam = o.sam == "-" ? STDOUT : open(o.sam, "w")
    write_sam_head(sam, bam)
    for read in reads
        write_sam_line(sam, bam, read)
    end
end
